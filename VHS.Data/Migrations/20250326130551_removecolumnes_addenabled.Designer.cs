// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VHS.Data;

#nullable disable

namespace VHS.Data.Migrations
{
    [DbContext(typeof(VHSDBContext))]
    [Migration("20250326130551_removecolumnes_addenabled")]
    partial class removecolumnes_addenabled
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VHS.Data.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Auth0Id")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Auth.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PreferredLengthUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredMeasurementSystem")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredTemperatureUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredTheme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredVolumeUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PreferredWeightUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSettings", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.Batch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BatchConfigurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SeedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BatchConfigurationId");

                    b.HasIndex("FarmId");

                    b.ToTable("Batches", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.BatchConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TotalTrays")
                        .HasColumnType("int");

                    b.Property<int>("TraysPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.HasIndex("RecipeId");

                    b.ToTable("BatchConfigurations", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.BatchJournal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MiscellaneousComments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PeatLotNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PeatPrescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PeatSupplier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PrognosisDays")
                        .HasColumnType("int");

                    b.Property<double>("PrognosisGermination")
                        .HasColumnType("float");

                    b.Property<double>("PrognosisHeight")
                        .HasColumnType("float");

                    b.Property<double>("PrognosisRootLength")
                        .HasColumnType("float");

                    b.Property<double>("PrognosisRootNeckDiameter")
                        .HasColumnType("float");

                    b.Property<double>("PrognosisWeight")
                        .HasColumnType("float");

                    b.Property<string>("RemarksGermination")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RemarksHarvestPlants")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RemarksIntermediatePlants")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RemarksYoungPlants")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("SeedLotNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("SeedSupplier")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("YieldComparison")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("YieldLettuceCount")
                        .HasColumnType("int");

                    b.Property<double>("YieldLettuceHeight")
                        .HasColumnType("float");

                    b.Property<double>("YieldLettuceWeight")
                        .HasColumnType("float");

                    b.Property<int>("YieldMicroCount")
                        .HasColumnType("int");

                    b.Property<double>("YieldMicroHeight")
                        .HasColumnType("float");

                    b.Property<double>("YieldMicroWeight")
                        .HasColumnType("float");

                    b.Property<int>("YieldPetiteCount")
                        .HasColumnType("int");

                    b.Property<double>("YieldPetiteHeight")
                        .HasColumnType("float");

                    b.Property<double>("YieldPetiteWeight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("BatchJournals", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FarmTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FarmTypeId");

                    b.ToTable("Farms", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.FarmType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("FarmTypes", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Floor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Floors", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Layer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("LayerNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("RackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RackId");

                    b.ToTable("Layers", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Rack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<Guid>("FloorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LayerCount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TrayCountPerLayer")
                        .HasColumnType("int");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.ToTable("Racks", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Tray", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RFIDTag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Trays", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.TrayCurrentState", b =>
                {
                    b.Property<Guid>("TrayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DestinationLayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderOnLayer")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SeededDateTimeUTC")
                        .HasColumnType("datetime2");

                    b.HasKey("TrayId");

                    b.HasIndex("BatchId");

                    b.HasIndex("DestinationLayerId");

                    b.HasIndex("LayerId");

                    b.ToTable("TrayCurrentStates", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.TrayTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FromPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ToPhaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrayId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TrayId");

                    b.ToTable("TrayTransactions", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.LightZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TargetDLI")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("LightZones", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.LightZoneSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CalculatedDLI")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Intensity")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<Guid>("LightZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("LightZoneId");

                    b.ToTable("LightZoneSchedules", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.WaterZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("TargetDWR")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("WaterZones", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.WaterZoneSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<double?>("CalculatedDWR")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<decimal>("Volume")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("VolumeUnit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("WaterZoneId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WaterZoneId");

                    b.ToTable("WaterZoneSchedules", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeedNumber")
                        .HasColumnType("int");

                    b.Property<string>("SeedSupplier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("GerminationDays")
                        .HasColumnType("int");

                    b.Property<int>("GrowDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PropagationDays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.RecipeLightSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LightZoneScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TargetDLI")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LightZoneScheduleId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeLightSchedules", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.RecipeWaterSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("TargetDWR")
                        .HasColumnType("float");

                    b.Property<Guid>("WaterZoneScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("WaterZoneScheduleId");

                    b.ToTable("RecipeWaterSchedules", (string)null);
                });

            modelBuilder.Entity("VHS.Data.Models.Auth.UserSetting", b =>
                {
                    b.HasOne("VHS.Data.Models.Auth.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("VHS.Data.Models.Auth.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.Batch", b =>
                {
                    b.HasOne("VHS.Data.Models.Batches.BatchConfiguration", "BatchConfiguration")
                        .WithMany("Batches")
                        .HasForeignKey("BatchConfigurationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BatchConfiguration");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.BatchConfiguration", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VHS.Data.Models.Produce.Recipe", "Recipe")
                        .WithMany("BatchConfigurations")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Farm", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.FarmType", "FarmType")
                        .WithMany("Farms")
                        .HasForeignKey("FarmTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FarmType");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Floor", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany("Floors")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Layer", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Rack", "Rack")
                        .WithMany("Layers")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Rack");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Rack", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Floor", "Floor")
                        .WithMany("Racks")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Floor");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Tray", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.TrayCurrentState", b =>
                {
                    b.HasOne("VHS.Data.Models.Batches.Batch", "Batch")
                        .WithMany()
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VHS.Data.Models.Farming.Layer", "DestinationLayer")
                        .WithMany()
                        .HasForeignKey("DestinationLayerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VHS.Data.Models.Farming.Layer", null)
                        .WithMany("Trays")
                        .HasForeignKey("LayerId");

                    b.HasOne("VHS.Data.Models.Farming.Tray", "Tray")
                        .WithOne()
                        .HasForeignKey("VHS.Data.Models.Farming.TrayCurrentState", "TrayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Batch");

                    b.Navigation("DestinationLayer");

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.TrayTransaction", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Tray", "Tray")
                        .WithMany()
                        .HasForeignKey("TrayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Tray");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.LightZone", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.LightZoneSchedule", b =>
                {
                    b.HasOne("VHS.Data.Models.Growth.LightZone", "LightZone")
                        .WithMany("LightZoneSchedules")
                        .HasForeignKey("LightZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LightZone");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.WaterZone", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.WaterZoneSchedule", b =>
                {
                    b.HasOne("VHS.Data.Models.Growth.WaterZone", "WaterZone")
                        .WithMany("WaterZoneSchedules")
                        .HasForeignKey("WaterZoneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WaterZone");
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.Product", b =>
                {
                    b.HasOne("VHS.Data.Models.Farming.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.Recipe", b =>
                {
                    b.HasOne("VHS.Data.Models.Produce.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.RecipeLightSchedule", b =>
                {
                    b.HasOne("VHS.Data.Models.Growth.LightZoneSchedule", "LightZoneSchedule")
                        .WithMany()
                        .HasForeignKey("LightZoneScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VHS.Data.Models.Produce.Recipe", "Recipe")
                        .WithMany("RecipeLightSchedules")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("LightZoneSchedule");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.RecipeWaterSchedule", b =>
                {
                    b.HasOne("VHS.Data.Models.Produce.Recipe", "Recipe")
                        .WithMany("RecipeWaterSchedules")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VHS.Data.Models.Growth.WaterZoneSchedule", "WaterZoneSchedule")
                        .WithMany()
                        .HasForeignKey("WaterZoneScheduleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Recipe");

                    b.Navigation("WaterZoneSchedule");
                });

            modelBuilder.Entity("VHS.Data.Models.Auth.User", b =>
                {
                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("VHS.Data.Models.Batches.BatchConfiguration", b =>
                {
                    b.Navigation("Batches");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Farm", b =>
                {
                    b.Navigation("Floors");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.FarmType", b =>
                {
                    b.Navigation("Farms");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Floor", b =>
                {
                    b.Navigation("Racks");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Layer", b =>
                {
                    b.Navigation("Trays");
                });

            modelBuilder.Entity("VHS.Data.Models.Farming.Rack", b =>
                {
                    b.Navigation("Layers");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.LightZone", b =>
                {
                    b.Navigation("LightZoneSchedules");
                });

            modelBuilder.Entity("VHS.Data.Models.Growth.WaterZone", b =>
                {
                    b.Navigation("WaterZoneSchedules");
                });

            modelBuilder.Entity("VHS.Data.Models.Produce.Recipe", b =>
                {
                    b.Navigation("BatchConfigurations");

                    b.Navigation("RecipeLightSchedules");

                    b.Navigation("RecipeWaterSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
