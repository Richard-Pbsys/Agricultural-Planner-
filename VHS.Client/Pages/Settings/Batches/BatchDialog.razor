@using VHS.Services.Batches.DTO
@using VHS.Services.Farming.DTO
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Farming
@using VHS.Client.Services.Batches
@using VHS.Client.Services.Produce
@using VHS.Services.Common
@inject ISnackbar Snackbar
@inject BatchConfigurationClientService BatchConfigurationClientService

<Dialog Title="@DialogTitle" ShowDefaultActions="false">
    <ChildContent>
        <MudForm Model="Batch" @ref="form">
            @if (!IsLoading)
            {
                @if (Configurations.Any())
                {
                    <MudSelect T="Guid" Label="Batch Configuration" @bind-Value="SelectedConfigId" Variant="Variant.Outlined" Required="true">
                        @foreach (var config in Configurations)
                        {
                            <MudSelectItem Value="@config.Id">@config.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
            }
            <MudDatePicker @bind-Date="Batch.SeedDate" Label="Seed Date" Variant="Variant.Outlined" Required="true" />
            <MudDatePicker @bind-Date="Batch.HarvestDate" Label="Harvest Date" Variant="Variant.Outlined" />
            @if (!IsLoading)
            {
                <MudSelect T="Guid" Label="Status" @bind-Value="Batch.StatusId" Variant="Variant.Outlined" Required="true">
                    <MudSelectItem Value="@GlobalConstants.BATCHSTATUS_INPROGRESS">In Progress</MudSelectItem>
                    <MudSelectItem Value="@GlobalConstants.BATCHSTATUS_CANCELLED">Cancelled</MudSelectItem>
                    <MudSelectItem Value="@GlobalConstants.BATCHSTATUS_COMPLETED">Completed</MudSelectItem>
                    <MudSelectItem Value="@GlobalConstants.BATCHSTATUS_HARVESTED">Harvested</MudSelectItem>
                    <MudSelectItem Value="@GlobalConstants.BATCHSTATUS_PENDING">Pending</MudSelectItem>
                </MudSelect>
            }
        </MudForm>
    </ChildContent>
    <ActionsContent>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="Save" Disabled="@(form == null || IsLoading || !Configurations.Any())" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    </ActionsContent>
</Dialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public BatchDTO Batch { get; set; } = new BatchDTO();

    private MudForm form = new MudForm();
    private List<BatchConfigurationDTO> Configurations = new List<BatchConfigurationDTO>();
    private Guid SelectedConfigId { get; set; }
    private string DialogTitle => Batch.Id == Guid.Empty ? "Add Batch" : "Edit Batch";
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Configurations = (await BatchConfigurationClientService.GetAllBatchConfigurationsAsync())?.ToList() ?? new List<BatchConfigurationDTO>();

        if (!Configurations.Any())
        {
            Snackbar.Add("No batch configurations available. Please add a batch configuration before proceeding.", Severity.Error);
        }

        if (Batch.BatchConfiguration != null && Batch.BatchConfiguration.Id != Guid.Empty)
        {
            SelectedConfigId = Batch.BatchConfiguration.Id;
        }
        else if (Configurations.Any())
        {
            SelectedConfigId = Configurations.First().Id;
        }

        if (Batch.StatusId == Guid.Empty)
        {
            Batch.StatusId = GlobalConstants.BATCHSTATUS_PENDING;
        }
        IsLoading = false;
    }

    private void Save()
    {
        if (form != null && !IsLoading && Configurations.Any())
        {
            Batch.BatchConfiguration = Configurations.FirstOrDefault(c => c.Id == SelectedConfigId) ?? new BatchConfigurationDTO();
            MudDialog.Close(DialogResult.Ok(Batch));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
