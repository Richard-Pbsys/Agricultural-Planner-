@page "/system-settings/batches/configurations"
@using VHS.Services.Batches.DTO
@using VHS.Client.Services.Batches
@inject BatchConfigurationClientService BatchConfigurationClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<BatchSettings>
    <MudDataGrid Items="@BatchConfigurationsList" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Batch Configurations</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Batch Configuration" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddBatchConfiguration">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="x => x.Recipe.GrowDays" Title="Grow Days" Sortable="true" />
            <PropertyColumn Property="x => x.Recipe.PropagationDays" Title="Propagation Days" Sortable="true" />
            <PropertyColumn Property="x => x.Recipe.GerminationDays" Title="Germination Days" Sortable="true" />
            <PropertyColumn Property="x => x.TotalTrays" Title="Total Trays" Sortable="true" />
            <PropertyColumn Property="x => x.TraysPerDay" Title="Trays Per Day" Sortable="true" />
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditBatchConfiguration(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteBatchConfiguration(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@BatchConfigurationsList" />
        </PagerContent>
    </MudDataGrid>
    @if (BatchConfigurationsList == null || !BatchConfigurationsList.Any())
    {
        <MudAlert Severity="Severity.Info">No batch configurations found.</MudAlert>
    }
</BatchSettings>

@code {
    private IEnumerable<BatchConfigurationDTO>? BatchConfigurationsList;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadBatchConfigurations();
    }

    private async Task LoadBatchConfigurations()
    {
        IsLoading = true;
        BatchConfigurationsList = await BatchConfigurationClientService.GetAllBatchConfigurationsAsync();
        IsLoading = false;
    }

    private async Task AddBatchConfiguration()
    {
        var parameters = new DialogParameters
        {
            { "BatchConfiguration", new BatchConfigurationDTO() }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<BatchConfigurationsDialog>("Add New Batch Configuration", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newConfig = (BatchConfigurationDTO)result.Data;
            var createdConfig = await BatchConfigurationClientService.CreateBatchConfigurationAsync(newConfig);
            BatchConfigurationsList = BatchConfigurationsList.Append(createdConfig).ToList();
            await LoadBatchConfigurations();
            Snackbar.Add("Batch configuration added successfully", Severity.Success);
        }
    }

    private async Task EditBatchConfiguration(BatchConfigurationDTO config)
    {
        var parameters = new DialogParameters
        {
            { "BatchConfiguration", config }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<BatchConfigurationsDialog>("Edit Batch Configuration", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await BatchConfigurationClientService.UpdateBatchConfigurationAsync((BatchConfigurationDTO)result.Data);
            await LoadBatchConfigurations();
            Snackbar.Add("Batch configuration updated successfully", Severity.Success);
        }
    }

    private async Task DeleteBatchConfiguration(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this batch configuration?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await BatchConfigurationClientService.DeleteBatchConfigurationAsync(id);
            BatchConfigurationsList = BatchConfigurationsList.Where(x => x.Id != id).ToList();
            Snackbar.Add("Batch configuration deleted successfully", Severity.Success);
        }
    }
}
