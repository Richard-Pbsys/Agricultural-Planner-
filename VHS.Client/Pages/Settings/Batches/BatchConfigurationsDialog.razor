@using VHS.Services.Batches.DTO
@using VHS.Services.Farming.DTO
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Farming
@using VHS.Client.Services.Batches
@using VHS.Client.Services.Produce
@inject ISnackbar Snackbar
@inject FarmClientService FarmClientService
@inject RecipeClientService RecipeClientService
@inject BatchConfigurationClientService BatchConfigurationClientService

<Dialog Title="@DialogTitle" ShowDefaultActions="false">
    <ChildContent>
        <MudForm Model="BatchConfiguration" @ref="form">
            <MudTextField @bind-Value="BatchConfiguration.Name" Label="Configuration Name" Variant="Variant.Outlined" Required="true" />
            @if (!IsLoading)
            {
                <MudSelect T="Guid" Label="Farm" @bind-Value="SelectedFarmId" Variant="Variant.Outlined" Required="true">
                    @foreach (var farm in Farms)
                    {
                        <MudSelectItem Value="@farm.Id">@farm.Name</MudSelectItem>
                    }
                </MudSelect>
                @if (Recipes.Any())
                {
                    <MudSelect T="Guid" Label="Recipe" @bind-Value="SelectedRecipeId" Variant="Variant.Outlined" Required="true">
                        @foreach (var recipe in Recipes)
                        {
                            <MudSelectItem Value="@recipe.Id">@recipe.Name</MudSelectItem>
                        }
                    </MudSelect>
                }
            }
            @if (BatchConfiguration?.Recipe != null)
            {
                <MudNumericField T="int" @bind-Value="BatchConfiguration.Recipe.GrowDays" Label="Grow Days" Variant="Variant.Outlined" Disabled="true" Required="true" />
                <MudNumericField T="int" @bind-Value="BatchConfiguration.Recipe.PropagationDays" Label="Propagation Days" Variant="Variant.Outlined" Disabled="true" Required="true" />
                <MudNumericField T="int" @bind-Value="BatchConfiguration.Recipe.GerminationDays" Label="Germination Days" Variant="Variant.Outlined" Disabled="true" Required="true" />
            }
            <MudNumericField T="int" @bind-Value="BatchConfiguration.TotalTrays" Label="Total Trays" Variant="Variant.Outlined" Required="true" />
            <MudNumericField T="int" @bind-Value="BatchConfiguration.TraysPerDay" Label="Trays Per Day" Variant="Variant.Outlined" Required="true" />
        </MudForm>
    </ChildContent>
    <ActionsContent>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="Save" Disabled="@(form == null || IsLoading || !Recipes.Any())" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    </ActionsContent>
</Dialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public BatchConfigurationDTO BatchConfiguration { get; set; } = new BatchConfigurationDTO() { Recipe = new RecipeDTO() };

    private MudForm form = new MudForm();
    private List<FarmDTO> Farms = new List<FarmDTO>();
    private List<RecipeDTO> Recipes = new List<RecipeDTO>();

    private Guid SelectedFarmId { get; set; }

    // Use a backing field to update when the recipe changes.
    private Guid _selectedRecipeId;
    private Guid SelectedRecipeId
    {
        get => _selectedRecipeId;
        set
        {
            if (_selectedRecipeId != value)
            {
                _selectedRecipeId = value;
                UpdateBatchConfigurationFromRecipe();
            }
        }
    }

    private string DialogTitle => BatchConfiguration.Id == Guid.Empty ? "Add Batch Configuration" : "Edit Batch Configuration";
    private bool IsLoading { get; set; } = true;

    private TimeSpan? StartTimeSpan
    {
        get => BatchConfiguration.StartTime.HasValue ? BatchConfiguration.StartTime.Value.ToTimeSpan() : (TimeSpan?)null;
        set => BatchConfiguration.StartTime = value.HasValue ? TimeOnly.FromTimeSpan(value.Value) : null;
    }

    private TimeSpan? EndTimeSpan
    {
        get => BatchConfiguration.EndTime.HasValue ? BatchConfiguration.EndTime.Value.ToTimeSpan() : (TimeSpan?)null;
        set => BatchConfiguration.EndTime = value.HasValue ? TimeOnly.FromTimeSpan(value.Value) : null;
    }

    protected override async Task OnInitializedAsync()
    {
        // Load available farms and recipes
        Farms = (await FarmClientService.GetAllFarmsAsync())?.ToList() ?? new List<FarmDTO>();
        Recipes = (await RecipeClientService.GetAllRecipesAsync())?.ToList() ?? new List<RecipeDTO>();

        if (!Recipes.Any())
        {
            Snackbar.Add("No recipes available. Please add a recipe before proceeding.", Severity.Error);
        }

        SelectedFarmId = BatchConfiguration.FarmId != Guid.Empty ? BatchConfiguration.FarmId : Farms.FirstOrDefault()?.Id ?? Guid.Empty;

        BatchConfiguration.Recipe ??= new RecipeDTO();

        _selectedRecipeId = BatchConfiguration.Recipe.Id != Guid.Empty ? BatchConfiguration.Recipe.Id : Recipes.FirstOrDefault()?.Id ?? Guid.Empty;

        UpdateBatchConfigurationFromRecipe();
        IsLoading = false;
    }

    private void UpdateBatchConfigurationFromRecipe()
    {
        var selectedRecipe = Recipes.FirstOrDefault(r => r.Id == _selectedRecipeId);
        if (selectedRecipe != null)
        {
            // Automatically populate lifecycle values from the selected recipe.
            BatchConfiguration.Recipe ??= new RecipeDTO();
            BatchConfiguration.Recipe.GerminationDays = selectedRecipe.GerminationDays;
            BatchConfiguration.Recipe.PropagationDays = selectedRecipe.PropagationDays;
            BatchConfiguration.Recipe.GrowDays = selectedRecipe.GrowDays;
        }
    }

    private void Save()
    {
        if (form != null && !IsLoading && Recipes.Any())
        {
            BatchConfiguration.FarmId = SelectedFarmId;
            BatchConfiguration.Recipe.Id = _selectedRecipeId;
            MudDialog.Close(DialogResult.Ok(BatchConfiguration));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
