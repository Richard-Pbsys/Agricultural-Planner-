@page "/system-settings/farm/management"
@using VHS.Services.Farming
@using VHS.Services.Farming.DTO
@using VHS.Client.Services.Farming
@using VHS.Client.Pages.Settings.Farming
@inject FarmClientService FarmClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<FarmSettings>
    <MudDataGrid Items="@Farms" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Farm Management</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Farm" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddFarm">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" />
            <PropertyColumn Property="x => x.FarmTypeName" Title="Farm Type" Sortable="true" />
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditFarm(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteFarm(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@Farms" />
        </PagerContent>
    </MudDataGrid>
    @if (Farms == null || !Farms.Any())
    {
        <MudAlert Severity="Severity.Info">No farms found.</MudAlert>
    }
</FarmSettings>

@code {
    private List<FarmDTO> Farms = new List<FarmDTO>();
    private bool IsLoading = true;
    private FarmDTO CurrentFarm = new FarmDTO();
    private List<FarmTypeDTO> FarmTypes = new List<FarmTypeDTO>();

    protected override async Task OnInitializedAsync()
    {
        await LoadFarmTypes();
        await LoadFarms();
    }

    private async Task LoadFarmTypes()
    {
        FarmTypes = (await FarmClientService.GetAllFarmTypesAsync()).OrderBy(ft => ft.Name).ToList();
    }

    private async Task LoadFarms()
    {
        IsLoading = true;
        Farms = (await FarmClientService.GetAllFarmsAsync()).ToList();
        IsLoading = false;
    }

    private async Task AddFarm()
    {
        var parameters = new DialogParameters
        {
            { "Farm", new FarmDTO { FarmTypeId = FarmTypes.FirstOrDefault(ft => ft.Name == "Vertical")?.Id ?? Guid.Empty } },
            { "FarmTypes", FarmTypes }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<FarmDialog>("Add New Farm", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            IsLoading = true;
            StateHasChanged();

            var newFarm = (FarmDTO)result.Data;
            var createdFarm = await FarmClientService.CreateFarmAsync(newFarm);
            Farms.Add(createdFarm);

            IsLoading = false;
            StateHasChanged();
            Snackbar.Add("Farm added successfully", Severity.Success);
        }
    }

    private async Task EditFarm(FarmDTO farm)
    {
        var parameters = new DialogParameters
        {
            { "Farm", farm },
            { "FarmTypes", FarmTypes }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<FarmDialog>("Edit Farm", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedFarm = (FarmDTO)result.Data;
            await FarmClientService.UpdateFarmAsync(updatedFarm);
            var index = Farms.FindIndex(f => f.Id == updatedFarm.Id);
            if (index >= 0)
            {
                Farms[index] = updatedFarm;
            }

            Snackbar.Add("Farm updated successfully", Severity.Success);
        }
    }

    private async Task DeleteFarm(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this farm?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await FarmClientService.DeleteFarmAsync(id);
            var farmToRemove = Farms.FirstOrDefault(f => f.Id == id);
            if (farmToRemove != null)
            {
                Farms.Remove(farmToRemove);
            }

            Snackbar.Add("Farm deleted successfully", Severity.Success);
        }
    }
}
