@inject NavigationManager Navigation

<MudPaper Class="pa-4" Elevation="2">
    <MudTabs Outlined="true" Position="Position.Top" Rounded="true" Border="true" ApplyEffectsToContainer="true"
             AlwaysShowScrollButtons="false" ActiveTabClass="border-solid border-2 mud-border-primary"
             @bind-ActivePanelIndex="ActiveTabIndex">
        @foreach (var setting in TitleUrl)
        {
            <MudTabPanel Text="@setting.Title" />
        }
    </MudTabs>

    <MudGrid Class="pt-2">
        <MudItem xs="12">
            <MudPaper Outlined="true" Square="true">
                @ChildContent
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private List<TitleUrl> TitleUrl = new()
    {
        new("Farm Management", "/system-settings/farm/management"),
        new("Floors", "/system-settings/farm/floors"),
        new("Racks", "/system-settings/farm/racks"),
        new("Layers", "/system-settings/farm/layers"),
        new("Trays", "/system-settings/farm/trays")
    };

    private int _activeTabIndex;
    private int ActiveTabIndex
    {
        get => _activeTabIndex;
        set
        {
            if (_activeTabIndex != value)
            {
                _activeTabIndex = value;
                if (_activeTabIndex >= 0 && _activeTabIndex < TitleUrl.Count)
                {
                    Navigation.NavigateTo(TitleUrl[_activeTabIndex].Url);
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        SetActiveTab();
        Navigation.LocationChanged += OnLocationChanged;
    }

    private void SetActiveTab()
    {
        var currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri).Trim('/').ToLowerInvariant();
        var index = TitleUrl.FindIndex(s => s.Url.Trim('/').ToLowerInvariant() == currentUrl);
        _activeTabIndex = index >= 0 ? index : 0;
    }

    private void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        SetActiveTab();
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
