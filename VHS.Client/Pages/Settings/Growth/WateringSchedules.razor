@page "/system-settings/growth/watering-schedules"
@using VHS.Services.Growth.DTO
@using VHS.Client.Services.Growth
@using VHS.Client.Pages.Settings.Growth
@inject WaterZoneScheduleClientService ScheduleClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<GrowthSettings>
    <MudDataGrid Items="@ScheduleList" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Watering Schedules</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Watering Schedule" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddSchedule">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.WaterZone.Name" Title="Water Zone" Sortable="true" />
            <TemplateColumn Title="Start Time" Sortable="true">
                <CellTemplate Context="context">
                    @context.Item.StartTime.ToString("hh:mm tt")
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="End Time" Sortable="true">
                <CellTemplate Context="context">
                    @context.Item.EndTime.ToString("hh:mm tt")
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Volume" Sortable="true">
                <CellTemplate Context="context">
                    @($"{context.Item.Volume} L")
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Calculated DWR" Sortable="true">
                <CellTemplate Context="context">
                    @if (context.Item.CalculatedDWR.HasValue)
                    {
                        @($"{context.Item.CalculatedDWR.Value:F2} L/m²/d")
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditSchedule(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteSchedule(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@ScheduleList" />
        </PagerContent>
    </MudDataGrid>
    @if (ScheduleList == null || !ScheduleList.Any())
    {
        <MudAlert Severity="Severity.Info">No watering schedules found.</MudAlert>
    }
</GrowthSettings>

@code {
    private IEnumerable<WaterZoneScheduleDTO>? ScheduleList;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSchedules();
    }

    private async Task LoadSchedules()
    {
        IsLoading = true;
        ScheduleList = await ScheduleClientService.GetAllSchedulesAsync();
        IsLoading = false;
    }

    private async Task AddSchedule()
    {
        var parameters = new DialogParameters
        {
            { "Schedule", new WaterZoneScheduleDTO() }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<WateringSchedulesDialog>("Add New Watering Schedule", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newSchedule = (WaterZoneScheduleDTO)result.Data;
            var createdSchedule = await ScheduleClientService.CreateScheduleAsync(newSchedule);
            ScheduleList = ScheduleList.Append(createdSchedule).ToList();
            await LoadSchedules();
            Snackbar.Add("Schedule added successfully", Severity.Success);
        }
    }

    private async Task EditSchedule(WaterZoneScheduleDTO schedule)
    {
        var parameters = new DialogParameters
        {
            { "Schedule", schedule }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<WateringSchedulesDialog>("Edit Watering Schedule", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ScheduleClientService.UpdateScheduleAsync((WaterZoneScheduleDTO)result.Data);
            await LoadSchedules();
            Snackbar.Add("Schedule updated successfully", Severity.Success);
        }
    }

    private async Task DeleteSchedule(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this watering schedule?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ScheduleClientService.DeleteScheduleAsync(id);
            ScheduleList = ScheduleList.Where(s => s.Id != id).ToList();
            Snackbar.Add("Schedule deleted successfully", Severity.Success);
        }
    }
}
