@page "/system-settings/growth/watering-plan"
@using Microsoft.AspNetCore.Components.Forms
@using VHS.Services.Growth.Helpers
@using VHS.Services.Growth.DTO
@using VHS.Client.Services.Growth
@inject WaterZoneScheduleClientService WaterZoneScheduleClientService
@inject WaterZoneClientService WaterZoneClientService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<GrowthSettings>
    <MudTable Items="@TimeBlocks" Dense="true" Striped="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Watering Schedules</MudText>
            <MudSpacer />
            @if (!IsLoading)
            {
                <MudSelect T="Guid" Label="Water Zone" Variant="Variant.Outlined" Value="selectedWaterZoneId" ValueChanged="OnZoneChanged" Required="true">
                    @foreach (var zone in WaterZones)
                    {
                        <MudSelectItem Value="@zone.Id">@zone.Name</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudSpacer />
            <MudTooltip Text="Save Watering Schedules" Arrow="true" Placement="Placement.Top">
                <MudButton OnClick="SavePlan" Variant="Variant.Outlined" Color="Color.Primary" Class="mt-4">Save</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Time Start</MudTh>
            <MudTh>Time End</MudTh>
            <MudTh>Volume</MudTh>
            <MudTh>Calculated DWR</MudTh>
            <MudTh>Water Cycle</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Time Start">
                <MudSelect Variant="Variant.Outlined" T="TimeOnly"
                           Label="Time Start"
                           @bind-Value="context.Start"
                           @bind-Value:after="() => OnTimeChanged(context)">
                    @foreach (var t in AvailableTimes)
                    {
                        <MudSelectItem Value="t">@t.ToString("HH:mm")</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>

            <MudTd DataLabel="Time End">
                <MudSelect Variant="Variant.Outlined" T="TimeOnly"
                           Label="Time End"
                           @bind-Value="context.End"
                           @bind-Value:after="() => OnTimeChanged(context)">
                    @foreach (var t in AvailableTimes)
                    {
                        <MudSelectItem Value="t">@t.ToString("HH:mm")</MudSelectItem>
                    }
                </MudSelect>
            </MudTd>

            <MudTd DataLabel="Volume">
                <MudNumericField Variant="Variant.Outlined" T="decimal?"
                                 @bind-Value="context.Volume"
                                 Label="Volume"
                                 Min="0" Max="100"
                                 Immediate="true"
                                 OnBlur="@(() => UpdateBlockDWR(context))" />
            </MudTd>

            <MudTd DataLabel="Calculated DWR">
                <MudTextField T="string"
                              Value="@($"{context.CalculatedDWR.Value:F2} L/m²/d")"
                              Label="Calculated DWR"
                              Variant="Variant.Outlined"
                              ReadOnly="true" />
            </MudTd>

            <MudTd DataLabel="Water Cycle">
                <MudChart ChartType="ChartType.Line"
                          ChartSeries="@context.ChartSeries"
                          Width="150px"
                          Height="50px" />
            </MudTd>

            <MudTd DataLabel="Actions">
                <MudButton Variant="Variant.Text" OnClick="@(() => OpenWaterCycleModal(context))">
                    View
                </MudButton>
            </MudTd>
        </RowTemplate>
    </MudTable>
</GrowthSettings>

@code {
    private List<TimeOnly> AvailableTimes = Enumerable.Range(0, 24).Select(h => new TimeOnly(h, 0)).ToList();
    private List<string> XAxisLabelsFull = Enumerable.Range(0, 24)
        .Select(h => h == 0 || h == 23 || h % 3 == 0 ? new TimeOnly(h, 0).ToString("HH:mm") : "")
        .ToList();

    private List<WateringTimeBlock> TimeBlocks = new();
    private List<WaterZoneDTO> WaterZones = new();
    private Guid selectedWaterZoneId;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        WaterZones = (await WaterZoneClientService.GetAllWaterZonesAsync())?.ToList() ?? new List<WaterZoneDTO>();
        if (WaterZones.Any())
        {
            selectedWaterZoneId = WaterZones.First().Id;
            await OnZoneChanged(selectedWaterZoneId);
        }
    }

    private double CalculateDWRForBlock(decimal volume, TimeOnly start, TimeOnly end)
        => WaterZoneScheduleDWRHelper.CalculateDWR(volume, start, end);

    private async Task OnTimeChanged(WateringTimeBlock block)
    {
        block.CalculatedDWR = CalculateDWRForBlock(block.Volume ?? 0, block.Start, block.End);
        GenerateWaterCurve(block);
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void UpdateBlockDWR(WateringTimeBlock block)
    {
        block.CalculatedDWR = CalculateDWRForBlock(block.Volume ?? 0, block.Start, block.End);
        GenerateWaterCurve(block);
        StateHasChanged();
    }

    private void GenerateWaterCurve(WateringTimeBlock block)
    {
        var volume = (double)(block.Volume ?? 0);
        var dwrValue = CalculateDWRForBlock(block.Volume ?? 0, block.Start, block.End);
        var volumeCurve = new double[24];
        var dwrCurve = new double[24];

        for (int i = 0; i < 24; i++)
        {
            var currentHour = new TimeOnly(i, 0);
            bool isInRange = IsTimeInRange(currentHour, block.Start, block.End);
            volumeCurve[i] = isInRange ? volume : 0;
            dwrCurve[i] = isInRange ? dwrValue : 0;
        }

        block.ChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "Volume", Data = volumeCurve },
            new ChartSeries { Name = "DWR", Data = dwrCurve }
        };

        block.ChartXAxisLabels = XAxisLabelsFull;
    }

    private static bool IsTimeInRange(TimeOnly hour, TimeOnly start, TimeOnly end)
        => start < end ? (hour >= start && hour < end) : (hour >= start || hour < end);

    private async Task OpenWaterCycleModal(WateringTimeBlock block)
    {
        var parameters = new DialogParameters
        {
            { "SelectedBlock", block },
            { "XAxisLabelsFull", XAxisLabelsFull.ToArray() }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                Position = DialogPosition.TopCenter
            };

        await DialogService.ShowAsync<WateringPlanDialog>("Water Cycle", parameters, options);
    }

    private WaterZoneScheduleDTO MapBlockToDTO(WateringTimeBlock block)
        => new()
            {
                Id = block.Id,
                WaterZone = new WaterZoneDTO { Id = selectedWaterZoneId },
                StartTime = block.Start,
                EndTime = block.End,
                Volume = block.Volume ?? 0,
                CalculatedDWR = block.CalculatedDWR
            };

    private async Task OnZoneChanged(Guid newZoneId)
    {
        selectedWaterZoneId = newZoneId;
        IsLoading = true;
        TimeBlocks.Clear();

        var existingSchedules = await WaterZoneScheduleClientService.GetSchedulesByZoneAsync(newZoneId);

        for (int hour = 0; hour < 24; hour++)
        {
            var start = new TimeOnly(hour, 0);
            var match = existingSchedules.FirstOrDefault(s => s.StartTime == start);

            var block = match != null
                ? new WateringTimeBlock
                    {
                        Id = match.Id,
                        Start = match.StartTime,
                        End = match.EndTime,
                        Volume = match.Volume,
                        CalculatedDWR = match.CalculatedDWR
                    }
                : new WateringTimeBlock
                    {
                        Start = start,
                        End = new TimeOnly((hour + 1) % 24, 0),
                        Volume = 2m
                    };

            GenerateWaterCurve(block);
            block.CalculatedDWR = CalculateDWRForBlock(block.Volume ?? 0, block.Start, block.End);
            TimeBlocks.Add(block);
        }

        IsLoading = false;
        StateHasChanged();
    }

    private async Task SavePlan()
    {
        if (selectedWaterZoneId == Guid.Empty)
        {
            Snackbar.Add("Please select a Water Zone before saving.", Severity.Warning);
            return;
        }

        IsLoading = true;

        foreach (var block in TimeBlocks)
        {
            var dto = MapBlockToDTO(block);
            dto.WaterZone.Id = selectedWaterZoneId;

            if (dto.Id == Guid.Empty)
            {
                var created = await WaterZoneScheduleClientService.CreateScheduleAsync(dto);
                block.Id = created.Id;
            }
            else
            {
                await WaterZoneScheduleClientService.UpdateScheduleAsync(dto);
            }
        }

        IsLoading = false;
        Snackbar.Add("Watering schedules saved successfully.", Severity.Success);
    }
}
