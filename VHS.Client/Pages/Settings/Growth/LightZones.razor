@page "/system-settings/growth/light-zones"
@using VHS.Services.Growth
@using VHS.Services.Growth.DTO
@using VHS.Client.Services.Growth
@using VHS.Client.Pages.Settings.Growth
@inject LightZoneClientService LightZoneClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<GrowthSettings>
    <MudDataGrid Items="@LightZoneList" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Light Zones</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Light Zone" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddLightZone">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <TemplateColumn Title="Target DLI" Sortable="true">
                <CellTemplate Context="context">
                    @if (context.Item.TargetDLI.HasValue)
                    {
                        @($"{context.Item.TargetDLI.Value:F2} mol/m²/d")
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditLightZone(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteLightZone(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@LightZoneList" />
        </PagerContent>
    </MudDataGrid>
    @if (LightZoneList == null || !LightZoneList.Any())
    {
        <MudAlert Severity="Severity.Info">No light zones found.</MudAlert>
    }
</GrowthSettings>

@code {
    private IEnumerable<LightZoneDTO>? LightZoneList;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadLightZones();
    }

    private async Task LoadLightZones()
    {
        IsLoading = true;
        LightZoneList = await LightZoneClientService.GetAllLightZonesAsync();
        IsLoading = false;
    }

    private async Task AddLightZone()
    {
        var parameters = new DialogParameters
        {
            { "LightZone", new LightZoneDTO() }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<LightZonesDialog>("Add New Light Zone", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newZone = (LightZoneDTO)result.Data;
            var createdZone = await LightZoneClientService.CreateLightZoneAsync(newZone);
            LightZoneList = LightZoneList.Append(createdZone).ToList();
            Snackbar.Add("Light zone added successfully", Severity.Success);
        }
    }

    private async Task EditLightZone(LightZoneDTO zone)
    {
        var parameters = new DialogParameters
        {
            { "LightZone", zone }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<LightZonesDialog>("Edit Light Zone", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LightZoneClientService.UpdateLightZoneAsync((LightZoneDTO)result.Data);
            await LoadLightZones();
            Snackbar.Add("Light zone updated successfully", Severity.Success);
        }
    }

    private async Task DeleteLightZone(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this light zone?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LightZoneClientService.DeleteLightZoneAsync(id);
            LightZoneList = LightZoneList.Where(x => x.Id != id).ToList();
            Snackbar.Add("Light zone deleted successfully", Severity.Success);
        }
    }
}
