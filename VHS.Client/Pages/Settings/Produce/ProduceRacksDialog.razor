@* @using VHS.Services.Farming.DTO
@using VHS.Services.Produce.DTO
@inject IDialogService Dialog

<MudDialog>
    <TitleContent>
        @(ProductCategoryRack.ProductCategoryId == Guid.Empty ? "Add Product Category Rack" : "Edit Product Category Rack")
    </TitleContent>
    <DialogContent>
        <MudForm Model="ProductCategoryRack" IsValid="IsValid">
            <MudSelect T="Guid" Label="Produce Type" Variant="Variant.Outlined" @bind-Value="ProductCategoryRack.ProductCategoryId" Required="true">
                @foreach (var type in AvailableProductCategories)
                {
                    <MudSelectItem T="Guid" Value="@type.Id">@type.Name (@type.FarmName)</MudSelectItem>
                }
            </MudSelect>
            <MudSelect T="Guid" Label="Rack" Variant="Variant.Outlined" @bind-Value="ProductCategoryRack.RackId" Required="true">
                @foreach (var rack in AvailableRacks)
                {
                    <MudSelectItem T="Guid" Value="@rack.Id">@rack.Name (@rack.TypeName)</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="Save" Disabled="!IsValid" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter] public ProductCategoryRackDTO ProductCategoryRack { get; set; } = new ProductCategoryRackDTO();

    [Parameter] public List<ProductCategoryDTO> AvailableProductCategories { get; set; } = new();
    [Parameter] public List<RackDTO> AvailableRacks { get; set; } = new();

    private bool IsValid => ProductCategoryRack.ProductCategoryId != Guid.Empty && ProductCategoryRack.RackId != Guid.Empty;

    private void Save() => MudDialog.Close(DialogResult.Ok(ProductCategoryRack));
    private void Cancel() => MudDialog.Cancel();
}
 *@