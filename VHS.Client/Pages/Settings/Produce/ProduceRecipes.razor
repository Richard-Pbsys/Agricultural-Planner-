@page "/system-settings/produce/recipes"
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Produce
@using VHS.Client.Pages.Settings.Produce
@inject RecipeClientService RecipeClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<ProduceSettings>
    <MudDataGrid T="RecipeDTO" Items="@Recipes" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Recipes</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Recipe" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddRecipe">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" />
            <PropertyColumn Property="x => x.Product.Name" Title="Produce Variant" Sortable="true" />
            <PropertyColumn Property="x => x.GrowDays" Title="Grow Days" Sortable="true" />
            <PropertyColumn Property="x => x.PropagationDays" Title="Propagation Days" Sortable="true" />
            <PropertyColumn Property="x => x.GerminationDays" Title="Germination Days" Sortable="true" />
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditRecipe(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteRecipe(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>
    @if (Recipes == null || !Recipes.Any())
    {
        <MudAlert Severity="Severity.Info">No recipes found.</MudAlert>
    }
</ProduceSettings>

@code {
    private List<RecipeDTO> Recipes = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        IsLoading = true;
        Recipes = (await RecipeClientService.GetAllRecipesAsync())?.ToList() ?? new List<RecipeDTO>();
        IsLoading = false;
    }

    private async Task AddRecipe()
    {
        var parameters = new DialogParameters
        {
            { "Recipe", new RecipeDTO() }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<RecipeDialog>("Add New Recipe", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newRecipe = (RecipeDTO)result.Data;
            var createdRecipe = await RecipeClientService.CreateRecipeAsync(newRecipe);
            Recipes.Add(createdRecipe);
            Snackbar.Add("Recipe added successfully", Severity.Success);
        }
    }

    private async Task EditRecipe(RecipeDTO recipe)
    {
        var parameters = new DialogParameters
        {
            { "Recipe", recipe }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<RecipeDialog>("Edit Recipe", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedRecipe = (RecipeDTO)result.Data;
            await RecipeClientService.UpdateRecipeAsync(updatedRecipe);
            var index = Recipes.FindIndex(r => r.Id == updatedRecipe.Id);
            if (index >= 0)
            {
                Recipes[index] = updatedRecipe;
            }
            Snackbar.Add("Recipe updated successfully", Severity.Success);
            await LoadRecipes();
        }
    }

    private async Task DeleteRecipe(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this recipe?" }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await RecipeClientService.DeleteRecipeAsync(id);
            var recipeToRemove = Recipes.FirstOrDefault(r => r.Id == id);
            if (recipeToRemove != null)
            {
                Recipes.Remove(recipeToRemove);
            }
            Snackbar.Add("Recipe deleted successfully", Severity.Success);
        }
    }
}
