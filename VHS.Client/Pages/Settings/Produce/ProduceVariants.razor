@page "/system-settings/produce/variants"
@using VHS.Services.Produce
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Produce
@using VHS.Client.Pages.Settings.Produce
@using VHS.Services.Common
@using VHS.Services.Farming.Constants
@inject ProductClientService ProductClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<ProduceSettings>
    <MudDataGrid Items="@Products" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Produce Variants</MudText>
            <MudSpacer />
            <MudTooltip Text="Add New Produce Variant" Arrow="true" Placement="Placement.Top">
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddProduceVariant">Add New</MudButton>
            </MudTooltip>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Name" Title="Name" Sortable="true" />
            <PropertyColumn Property="x => x.Description" Title="Description" Sortable="true" />
            <PropertyColumn Property="x => x.ProductCategoryName" Title="Produce Type" Sortable="true" />
            <PropertyColumn Property="x => x.SeedNumber" Title="Seed Number" Sortable="true" />
            <TemplateColumn Title="Image" Sortable="false">
                <CellTemplate Context="context">
                    @if (!string.IsNullOrEmpty(context.Item.ImageData))
                    {
                        <MudImage Src="@context.Item.ImageData" Height="50" Alt=@($"Image for {context.Item.Name}") />
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Actions">
                <CellTemplate Context="context">
                    <MudStack Row Spacing="1">
                        <MudTooltip Text="Edit" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Default" OnClick="@(() => EditProduceVariant(context.Item))" />
                        </MudTooltip>
                        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Top">
                            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => DeleteProduceVariant(context.Item.Id))" />
                        </MudTooltip>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@Products" />
        </PagerContent>
    </MudDataGrid>
    @if (Products == null || !Products.Any())
    {
        <MudAlert Severity="Severity.Info">No produce variants found.</MudAlert>
    }
</ProduceSettings>

@code {
    private List<ProductDTO> Products = new List<ProductDTO>();
    private List<ProductCategoryDTO> ProductCategories = new List<ProductCategoryDTO>();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
        await LoadProductCategories();
    }

    private async Task LoadProducts()
    {
        IsLoading = true;
        Products = await ProductClientService.GetAllProductsAsync();
        IsLoading = false;
    }

    private async Task LoadProductCategories()
    {
        ProductCategories = new List<ProductCategoryDTO>
        {
            new ProductCategoryDTO
            {
                Id = GlobalConstants.PRODUCTCATEGORY_LETTUCE,
                Name = "Lettuce Heads"
            },
            new ProductCategoryDTO
            {
                Id = GlobalConstants.PRODUCTCATEGORY_PETITEGREENS,
                Name = "Petite Greens"
            },
            new ProductCategoryDTO
            {
                Id = GlobalConstants.PRODUCTCATEGORY_MICROGREENS,
                Name = "Micro Greens"
            }
        };

        await Task.CompletedTask;
    }

    private async Task AddProduceVariant()
    {
        var parameters = new DialogParameters
        {
            { "Product", new ProductDTO() },
            { "ProductCategories", ProductCategories }
        };
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                Position = DialogPosition.TopCenter
            };
        var dialog = await Dialog.ShowAsync<ProductDialog>("Add New Produce Variant", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var newProduct = (ProductDTO)result.Data;
            var createdProduct = await ProductClientService.CreateProductAsync(newProduct);
            Products.Add(createdProduct);
            Snackbar.Add("Produce variant added successfully", Severity.Success);
        }
    }

    private async Task EditProduceVariant(ProductDTO product)
    {
        var parameters = new DialogParameters
        {
            { "Product", product },
            { "ProductCategories", ProductCategories }
        };
        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                Position = DialogPosition.TopCenter
            };
        var dialog = await Dialog.ShowAsync<ProductDialog>("Edit Produce Variant", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var updatedProduct = (ProductDTO)result.Data;
            await ProductClientService.UpdateProductAsync(updatedProduct);
            var index = Products.FindIndex(p => p.Id == updatedProduct.Id);
            if (index >= 0)
            {
                Products[index] = updatedProduct;
            }
            Snackbar.Add("Produce variant updated successfully", Severity.Success);
        }
    }

    private async Task DeleteProduceVariant(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this produce variant?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ProductClientService.DeleteProductAsync(id);
            Products.RemoveAll(p => p.Id == id);
            Snackbar.Add("Produce variant deleted successfully", Severity.Success);
        }
    }
}
