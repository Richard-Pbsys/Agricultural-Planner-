@* @page "/system-settings/produce/racks"
@using VHS.Services.Farming.DTO
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Farming
@using VHS.Client.Services.Produce
@using VHS.Client.Pages.Settings.Produce
@inject RackClientService RackClientService
@inject IDialogService Dialog
@inject ISnackbar Snackbar

<ProduceSettings>
    <MudDataGrid Items="@ProductCategoryRacks.OrderBy(r => r.RackName)" Hover="true" Loading="@IsLoading" LoadingProgressColor="Color.Info">
        <ToolBarContent>
            <MudText Typo="Typo.h5" Color="Color.Default">Produce Racks</MudText>
            <MudSpacer />
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@AddProductCategoryRack" Class="d-none">Add New Produce Rack</MudButton>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.RackName" Title="Rack" Sortable="true" />
            <PropertyColumn Property="x => x.TypeName" Title="Rack Type" Sortable="true" />
            <PropertyColumn Property="x => x.ProductCategoryName" Title="Produce Type" Sortable="true" />
            <PropertyColumn Property="x => x.AddedDateTime" Title="Created At" Format="dd MMM yyyy hh:mm tt" Sortable="true" />
            <PropertyColumn Property="x => x.ModifiedDateTime" Title="Updated At" Format="dd MMM yyyy hh:mm tt" Sortable="true" />
        </Columns>
        <PagerContent>
            <MudDataGridPager Items="@ProductCategoryRacks" />
        </PagerContent>
    </MudDataGrid>
    @if (!ProductCategoryRacks.Any())
    {
        <MudAlert Severity="Severity.Info">No product category rack found.</MudAlert>
    }
</ProduceSettings>

@code {
    private List<ProductCategoryRackDTO> ProductCategoryRacks = new();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProductCategoryRacks();
    }

    private async Task LoadProductCategoryRacks()
    {
        IsLoading = true;
        ProductCategoryRacks = await ProductCategoryRackService.GetAllProductCategoryRacksAsync() ?? new List<ProductCategoryRackDTO>();
        IsLoading = false;
    }

    private async Task AddProductCategoryRack()
    {
        var availableProduceTypes = await ProductCategoryClientService.GetAllProductCategoriesAsync() ?? new List<ProductCategoryDTO>();
        var availableRacks = await RackClientService.GetAllRacksAsync() ?? new List<RackDTO>();

        var parameters = new DialogParameters
        {
            { "ProductCategoryRack", new ProductCategoryRackDTO() },
            { "AvailableProductCategories", availableProduceTypes },
            { "AvailableRacks", availableRacks }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<ProduceRacksDialog>("Add Product Category Rack", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadProductCategoryRacks();
            Snackbar.Add("Product category rack added successfully", Severity.Success);
        }
    }

    private async Task EditProductCategoryRack(ProductCategoryRackDTO productCategoryRack)
    {
        var availableProduceTypes = await ProductCategoryClientService.GetAllProductCategoriesAsync() ?? new List<ProductCategoryDTO>();
        var availableRacks = await RackClientService.GetAllRacksAsync() ?? new List<RackDTO>();

        var parameters = new DialogParameters
        {
            { "ProductCategoryRack", productCategoryRack },
            { "AvailableProductCategories", availableProduceTypes },
            { "AvailableRacks", availableRacks }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<ProduceRacksDialog>("Edit Product Category Rack", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadProductCategoryRacks();
            Snackbar.Add("Product category rack updated successfully", Severity.Success);
        }
    }

    private async Task DeleteProductCategoryRack(Guid id)
    {
        var parameters = new DialogParameters
        {
            { "ConfirmTitle", "Confirm Delete" },
            { "ConfirmMessage", "Are you sure you want to delete this product category rack?" }
        };
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = false, MaxWidth = MaxWidth.Small, Position = DialogPosition.TopCenter };
        var dialog = await Dialog.ShowAsync<Confirm>("Confirm Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ProductCategoryRackService.DeleteProductCategoryRackAsync(id);
            await LoadProductCategoryRacks();
            Snackbar.Add("Link deleted successfully", Severity.Success);
        }
    }
}
 *@