@using Microsoft.AspNetCore.Components.Forms
@using VHS.Services.Farming.DTO
@using VHS.Services.Produce.DTO
@using VHS.Client.Services.Farming
@inject FarmClientService FarmClientService
@inject ISnackbar Snackbar

<Dialog Title="@DialogTitle" ShowDefaultActions="false">
    <ChildContent>
        <MudForm Model="Product" IsValid="IsValid">
            @if (!IsLoading)
            {
                <MudSelect T="Guid" Label="Farm" @bind-Value="SelectedFarmId" Variant="Variant.Outlined" Required="true">
                    @foreach (var farm in Farms)
                    {
                        <MudSelectItem Value="@farm.Id">@farm.Name</MudSelectItem>
                    }
                </MudSelect>
            }
            <MudSelect @bind-Value="Product.ProductCategoryId" Label="Produce Variant" Variant="Variant.Outlined" Required="true">
                @foreach (var category in ProductCategories)
                {
                    <MudSelectItem Value="@category.Id">@category.Name</MudSelectItem>
                }
            </MudSelect>
            <MudTextField @bind-Value="Product.Name" Label="Name" Variant="Variant.Outlined" Required="true" />
            <MudTextField @bind-Value="Product.Description" Lines="3" Label="Description" Variant="Variant.Outlined" Required="true" />
            <MudNumericField @bind-Value="Product.SeedNumber" Label="Seed Number" Variant="Variant.Outlined" Required="true" />
            <MudField Label="Upload Image" Variant="Variant.Outlined">
                <MudFileUpload T="IBrowserFile" Accept=".png, .jpg, .jpeg" FilesChanged="@(async file => await UploadFile(file))">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Outlined.CloudUpload">
                            Choose File
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (!string.IsNullOrEmpty(tempImageData))
                {
                    <MudButton OnClick="ClearImage" Variant="Variant.Outlined" Class="mt-2" Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete">
                        Clear Image
                    </MudButton>
                    <MudElement HtmlTag="div" Class="d-flex justify-center">
                        <MudImage Src="@tempImageData" Fluid="true" ObjectFit="ObjectFit.Contain" Alt="Produce Variant Image" />
                    </MudElement>
                }
            </MudField>
        </MudForm>
    </ChildContent>
    <ActionsContent>
        <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Default">Cancel</MudButton>
        <MudButton OnClick="Save" Disabled="!IsValid" Variant="Variant.Filled" Color="Color.Primary">Save</MudButton>
    </ActionsContent>
</Dialog>

@code {
    [CascadingParameter] private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductDTO Product { get; set; } = new ProductDTO();
    [Parameter] public List<ProductCategoryDTO> ProductCategories { get; set; } = new();

    private MudForm form = new MudForm();
    private List<FarmDTO> Farms = new List<FarmDTO>();
    private bool IsLoading { get; set; } = true;
    private Guid SelectedFarmId { get; set; }
    private string? tempImageData;

    private string DialogTitle => Product.Id == Guid.Empty ? "Add Produce Variant" : "Edit Produce Variant";

    private bool IsValid =>
        Product.ProductCategoryId != Guid.Empty &&
        !string.IsNullOrWhiteSpace(Product.Name) &&
        SelectedFarmId != Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        Farms = (await FarmClientService.GetAllFarmsAsync())?.ToList() ?? new List<FarmDTO>();

        if (Product.ProductCategoryId == Guid.Empty && ProductCategories.Any())
        {
            Product.ProductCategoryId = ProductCategories.First().Id;
        }
        if (!string.IsNullOrEmpty(Product.ImageData))
        {
            tempImageData = Product.ImageData;
        }

        if (Product.FarmId != Guid.Empty)
        {
            SelectedFarmId = Product.FarmId;
        }
        else if (Farms.Any())
        {
            SelectedFarmId = Farms.First().Id;
        }

        IsLoading = false;
    }

    private async Task UploadFile(IBrowserFile file)
    {
        if (file != null)
        {
            const long maxFileSize = 2097152; // 2 MB limit

            if (file.Size > maxFileSize)
            {
                Snackbar.Add("File size exceeds 2MB. Please upload a smaller image.", Severity.Warning);
                return;
            }
            using var stream = file.OpenReadStream(maxAllowedSize: maxFileSize);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            string mimeType = file.ContentType;
            tempImageData = $"data:{mimeType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        }
    }

    private void ClearImage()
    {
        tempImageData = string.Empty;
        Product.ImageData = tempImageData;
    }

    private void Save()
    {
        if (!string.IsNullOrEmpty(tempImageData))
        {
            Product.ImageData = tempImageData;
        }
        if (form.IsValid)
        {
            Product.FarmId = SelectedFarmId;
            MudDialog.Close(DialogResult.Ok(Product));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
