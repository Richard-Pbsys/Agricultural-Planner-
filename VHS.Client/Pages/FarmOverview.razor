@page "/farm-overview"
@using VHS.Client.Services.Farming
@using VHS.Services.Farming.DTO
@using VHS.Services.Farming
@using VHS.Services.Farming.Algorithm
@using VHS.Services.Produce.DTO
@using VHS.Services.Common
@inject PageTitleService PageTitleService
@inject FarmClientService FarmClientService

@if (!IsLoading)
{
    <MudPaper Class="pa-4" Elevation="2">
        <MudSelect T="Guid" Label="Select Farm" Variant="Variant.Outlined" Value="@SelectedFarmId" ValueChanged="OnFarmSelected">
            @if (Farms != null)
            {
                @foreach (var farm in Farms)
                {
                    <MudSelectItem T="Guid" Value="@farm.Id">@farm.Name</MudSelectItem>
                }
            }
        </MudSelect>
        <MudTable Class="mb-2" T="ProductCategoryBatchSizeDTO" Items="@ProduceBatchSizes" Hover="true" Dense="true">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Color="Color.Default">Batch Size</MudText>
                <MudSpacer />
                <MudNumericField T="int" Label="Total Days" Variant="Variant.Outlined" Class="batch-size-input" @bind-Value="PlanningDays" Min="1" />
                <MudSpacer />
                <MudNumericField T="int" Label="Total Trays" Variant="Variant.Outlined" Class="batch-size-input" @bind-Value="TotalTraysAvailable" Min="1" />
                <MudSpacer />
                <MudDatePicker Label="Start Date" Variant="Variant.Outlined" @bind-Date="StartDate" />
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Large"
                           OnClick="@CalculateCapacity"
                           Disabled="IsLoading || IsPlanning">
                    @(IsPlanning ? "Calculating..." : "Calculate")
                </MudButton>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Produce Type</MudTh>
                <MudTh>Grow Days</MudTh>
                <MudTh>Propagation Days</MudTh>
                <MudTh>Germination Days</MudTh>
                <MudTh>Trays Per Day</MudTh>
            </HeaderContent>
            <RowTemplate Context="context">
                <MudTd DataLabel="Produce Type">@context.ProductCategory.Name</MudTd>
                <MudTd DataLabel="Grow Days">
                    <MudNumericField T="int" Variant="Variant.Outlined" Class="batch-size-input"
                                     @bind-Value="@context.GrowDays"
                                     Disabled="@IsGrowDaysDisabled(context.ProductCategory.Name)" Min="0" />
                </MudTd>
                <MudTd DataLabel="Propagation Days">
                    <MudNumericField T="int" Variant="Variant.Outlined" Class="batch-size-input"
                                     @bind-Value="@context.PropagationDays"
                                     Disabled="@IsPropagationDaysDisabled(context.ProductCategory.Name)" Min="0" />
                </MudTd>
                <MudTd DataLabel="Germination Days">
                    <MudNumericField T="int" Variant="Variant.Outlined" Class="batch-size-input"
                                     @bind-Value="@context.GerminationDays"
                                     Disabled="@IsGerminationDaysDisabled(context.ProductCategory.Name)" Min="0" />
                </MudTd>
                <MudTd DataLabel="Trays Per Day">
                    <MudNumericField T="int" Variant="Variant.Outlined" Class="batch-size-input"
                                     @bind-Value="@context.TraysPerDay" />
                </MudTd>
            </RowTemplate>
        </MudTable>

        @if (SelectedFarm != null)
        {
            <MudExpansionPanels MultiExpansion="true">
                @if (PlanError != null)
                {
                    <MudAlert Severity="Severity.Error">@PlanError</MudAlert>
                }
                <MudExpansionPanel Expanded="(AllocationPlan != null)" Disabled="(AllocationPlan == null)">
                    <TitleContent>
                        <MudText Typo="Typo.h6" Color="Color.Default">Allocation Planning</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid Class="pt-2">
                            <MudItem xs="12">
                                <MudText>Total Harvest per Day: @AllocationPlan?.TotalHarvestPerDay</MudText>
                                <MudText>Max Farm Capacity: @AllocationPlan?.MaxFarmCapacity</MudText>
                                <MudTable Items="AllocationPlan?.DailyAllocations" Hover="true" Dense="true" Class="mt-4">
                                    <HeaderContent>
                                        <MudTh>Day</MudTh>
                                        <MudTh>Seeding</MudTh>
                                        <MudTh>Germination</MudTh>
                                        <MudTh>Growing</MudTh>
                                        <MudTh>Harvest</MudTh>
                                        <MudTh>Movements</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="day">
                                        <MudTd>@day.Day</MudTd>
                                        <MudTd>@day.Seeding</MudTd>
                                        <MudTd>@day.Germination</MudTd>
                                        <MudTd>@day.Growing</MudTd>
                                        <MudTd>@day.Harvest</MudTd>
                                        <MudTd>@day.TrayMovements</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel Expanded="(AllocationPlan != null)" Disabled="(AllocationPlan == null)">
                    <TitleContent>
                        <MudText Typo="Typo.h6" Color="Color.Default">Crop Division</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid Class="pt-2">
                            <MudItem xs="12">
                                <MudTable Items="AllocationPlan?.DetailedAllocations" Hover="true" Dense="true" Class="mt-2">
                                    <HeaderContent>
                                        <MudTh>Produce Type</MudTh>
                                        <MudTh>Rack Type</MudTh>
                                        <MudTh>Phase</MudTh>
                                        <MudTh>Trays Count</MudTh>
                                        <MudTh>Waste Trays</MudTh>
                                    </HeaderContent>
                                    <RowTemplate Context="detail">
                                        <MudTd>@detail.ProduceType</MudTd>
                                        <MudTd>@detail.RackType</MudTd>
                                        <MudTd>@detail.Phase</MudTd>
                                        <MudTd>@detail.TrayCount</MudTd>
                                        <MudTd>@detail.WasteTrays</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
                <MudExpansionPanel Expanded="(AllocationPlan != null)">
                    <TitleContent>
                        <MudText Typo="Typo.h6" Color="Color.Default">Racks Overview</MudText>
                    </TitleContent>
                    <ChildContent>
                        <MudGrid Class="pt-2">
                            <MudItem xs="12">
                                <MudExpansionPanels MultiExpansion="true">
                                    @foreach (var floor in SelectedFarm.Floors.OrderByDescending(x => x.FloorNumber))
                                    {
                                        <MudExpansionPanel Text="@($"Floor: {floor.Name}")" Expanded="true">
                                            <div class="d-flex flex-row gap-4 flex-wrap justify-content-center">
                                                @foreach (var rack in floor.Racks.OrderBy(x => x.Name))
                                                {
                                                    <MudCard>
                                                        <MudCardContent>
                                                            <MudText Typo="Typo.subtitle2" Class="mb-2">
                                                                @($"{rack.Name}: {rack.TypeName}")
                                                            </MudText>
                                                            <div class="d-flex flex-row gap-1 flex-wrap justify-content-center">
                                                                @for (int towerCount = 1; towerCount <= rack.AmountOfRacks; towerCount++)
                                                                {
                                                                    int currentTower = towerCount;
                                                                    string towerStr = currentTower.ToString("D2");
                                                                    <div class="rack-set-container">
                                                                        <div class="rack-head"></div>
                                                                        @for (int i = 0; i < rack.Layers.Count; i++)
                                                                        {
                                                                            int layerCtrl = i;
                                                                            <div class="rack-tray">
                                                                                <div class="rack-tray-overlay">
                                                                                    <div class="rack-tray-overlay-text overlay-dot">
                                                                                        <i class="pe-1 bi-circle-fill"></i>@($"{towerStr}-{(layerCtrl + 1).ToString("D2")}")
                                                                                    </div>
                                                                                </div>
                                                                            </div>
                                                                        }
                                                                        <div class="rack-footer"></div>
                                                                        <MudText Typo="Typo.subtitle2" Class="mt-2">
                                                                            @($"{towerStr}-{rack.Layers.Count.ToString("D2")}")
                                                                        </MudText>
                                                                    </div>
                                                                }
                                                            </div>
                                                        </MudCardContent>
                                                    </MudCard>
                                                }
                                            </div>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            </MudItem>
                        </MudGrid>
                    </ChildContent>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    </MudPaper>
}

@code {
    private List<FarmDTO> Farms = new();
    private FarmDTO SelectedFarm = new();
    private Guid SelectedFarmId { get; set; }
    private List<ProductCategoryBatchSizeDTO> ProduceBatchSizes { get; set; } = new();
    private bool IsLoading = true;

    // Planning inputs
    private int PlanningDays { get; set; } = 30;
    private int TotalTraysAvailable { get; set; } = 2880;
    private DateTime? StartDate { get; set; } = DateTime.Today;

    // Algorithm state
    private bool IsPlanning { get; set; }
    private string? PlanError { get; set; }
    private FarmAllocationPlan? AllocationPlan { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PageTitleService.Title = "Farm Overview";
        IsLoading = true;

        // Initialize produce batch sizes
        ProduceBatchSizes = new[]
        {
            new { Name = "Lettuce Heads", Id = GlobalConstants.PRODUCTCATEGORY_LETTUCE },
            new { Name = "Petite Greens", Id = GlobalConstants.PRODUCTCATEGORY_PETITEGREENS },
            new { Name = "Micro Greens", Id = GlobalConstants.PRODUCTCATEGORY_MICROGREENS }
        }
        .Select(x => new ProductCategoryBatchSizeDTO
        {
            ProductCategory = new ProductCategoryDTO { Name = x.Name, Id = x.Id },
            GrowDays = 0,
            PropagationDays = 0,
            GerminationDays = 0,
            TraysPerDay = 0,
            PlusMinPercentage = 0
        })
        .ToList();

        await LoadFarms();
        if (Farms.Any())
        {
            SelectedFarmId = Farms.First().Id;
            SelectedFarm = Farms.First();
        }

        IsLoading = false;
    }

    private async Task OnFarmSelected(Guid id)
    {
        SelectedFarmId = id;
        await LoadSelectedFarmData();
    }

    private async Task LoadFarms()
    {
        try
        {
            Farms = (await FarmClientService.GetAllFarmsAsync())?.ToList() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task LoadSelectedFarmData()
    {
        if (SelectedFarmId != Guid.Empty)
        {
            try
            {
                SelectedFarm = await FarmClientService.GetFarmByIdAsync(SelectedFarmId) ?? new();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private bool IsGerminationDaysDisabled(string name) => name == "Lettuce Heads";

    private bool IsPropagationDaysDisabled(string name) => name == "Petite Greens" || name == "Micro Greens";

    private bool IsGrowDaysDisabled(string name) => false;

    private async Task CalculateCapacity()
    {
        if (SelectedFarmId == Guid.Empty) return;

        IsPlanning = true;
        PlanError = null;
        AllocationPlan = null;

        try
        {
            AllocationPlan = await FarmClientService.RunFarmAllocationAsync(
                SelectedFarmId,
                ProduceBatchSizes,
                PlanningDays,
                TotalTraysAvailable,
                StartDate ?? DateTime.Today);

            if (AllocationPlan == null || !AllocationPlan.Success)
                PlanError = AllocationPlan?.ErrorMessage ?? "Planning failed.";
        }
        catch (Exception ex)
        {
            PlanError = ex.Message;
        }
        finally
        {
            IsPlanning = false;
        }
    }
}
