@page "/authentication/{action}"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using VHS.Client.Services.Auth
@using VHS.Services.Auth.DTO
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserClientService UserClientService
@inject LocalStorage LocalStorage

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="HandleLogInSucceeded" />

@code {
    [Parameter] public string? Action { get; set; }

    private async Task HandleLogInSucceeded(RemoteAuthenticationState state)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            string auth0Id = string.Empty;
            string email = string.Empty;
            string givenName = string.Empty;
            string familyName = string.Empty;
            string nickname = string.Empty;
            string nameClaim = string.Empty;

            foreach (var claim in user.Claims)
            {
                switch (claim.Type)
                {
                    case "sub":
                        auth0Id = claim.Value;
                        break;
                    case "email":
                        email = claim.Value;
                        break;
                    case "given_name":
                        givenName = claim.Value;
                        break;
                    case "family_name":
                        familyName = claim.Value;
                        break;
                    case "nickname":
                        nickname = claim.Value;
                        break;
                    case "name":
                        nameClaim = claim.Value;
                        break;
                }
            }

            if (string.IsNullOrWhiteSpace(givenName) && !string.IsNullOrWhiteSpace(nickname))
            {
                givenName = nickname;
            }

            if (string.IsNullOrWhiteSpace(email) && !string.IsNullOrWhiteSpace(nameClaim) && nameClaim.Contains("@"))
            {
                email = nameClaim;
            }

            var userDto = new UserDTO
                {
                    Auth0Id = auth0Id,
                    Email = email,
                    FirstName = !string.IsNullOrEmpty(givenName) ? givenName : string.Empty,
                    LastName = !string.IsNullOrEmpty(familyName) ? familyName : string.Empty
                };

            try
            {
                var createdUser = await UserClientService.CreateUserAsync(userDto);
                if (createdUser != null)
                {
                    var json = System.Text.Json.JsonSerializer.Serialize(createdUser);
                    await LocalStorage.SaveStateAsync("VHS_USER", json);
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error creating user: {ex.Message}");
            }
        }
    }
}
